# xxx - need to validate the tag for docker image tag
#       "valid ASCII and can contain lowercase and uppercase letters,
#        digits, underscores, periods, and hyphens. It cannot start
#        with a period or hyphen and must be no longer than 128 characters"

# IMPORTANT - do not use single quote for tag/branch/repo names. it will break the (bash) code

# there are two ways to get the tag
# - get it from $github.ref_name if it is a push tag event
# - get it using the commit ID with command "git describe --tags --abbrev=0" (latest tag)
#
# both can be stored
name: Push Trigger to Build Image
on:
  push:
    tags:
      - "**"
  workflow_dispatch:
    inputs:
      ref:
        description: Branch name or commit hash (branch selection above is ignored)
        required: true
        type: string
        default: main
      latest:
        description: Update "latest" tag?
        required: true
        type: boolean
        default: false
  schedule:
    - cron: "0 10 * * *"

jobs:
  check-base-image:
    runs-on: ubuntu-latest
    outputs:
      need-update: ${{steps.check.outputs.needs-updating}}
    steps:
      - id: check
        uses: lucacome/docker-image-update-checker@v1
        with:
          base-image: library/alpine:latest
          image: frederickwong/sandbox:latest
          platforms: linux/amd64,linux/arm64

  # get the sha and tag from github context (push tag action)
  get-push-params:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{steps.get-params.outputs.sha}}
      tag: ${{steps.get-params.outputs.tag}}
      is-semver: ${{steps.get-params.outputs.is-semver}}
    steps:
      - id: get-params
        name: Get Push Tag Params
        # see important note @ get-params job
        # no conditional handling needed because github.sha and github.ref
        # are required values in every action. I just needed to ignore them
        # if the event is not a push
        run: |
          echo 'sha=${{github.sha}}' >> "$GITHUB_OUTPUT"
          echo 'tag=${{github.ref_name}}' >> "$GITHUB_OUTPUT"
          is_semver=$([[ '${{github.ref_name}}' =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo 'true' || echo 'false')
          echo "is-semver=${is_semver}" >> "$GITHUB_OUTPUT"

  get-dispatch-params:
    uses: frederickcwong/.github/.github/workflows/get-latest-tag.yml@main
    with:
      ref: ${{inputs.ref}}

  get-schedule-params:
    uses: frederickcwong/.github/.github/workflows/get-latest-tag.yml@main
    with:
      ref: "main"

  # IMPORTANT NOTE
  #
  # there is an issue with the "needs" logic
  # "needs" is a logical AND operation, meaning it needs all jobs listed
  # if any of them failed or skipped, this job will not run.
  # ideally, we want "get-dispatch-params" runs only when it is a dispatch
  # event, etc. (this can be done by adding "if" condition in their jobs above)
  # however, adding "if" condition to the jobs will "skip" the jobs causing this
  # "get-params" job skipped.
  # There is another solution to this limitation as described in the link below
  # but it sounds like more tests/work/complications.
  # https://stackoverflow.com/questions/66343052/github-actions-or-operator-for-needs-clause
  # Hence my short-term solution is to let all of them runs, and use conditional statements
  # inside each job to determine the job's outputs (default random values vs
  # actual values).
  get-params:
    runs-on: ubuntu-latest
    needs:
      [
        get-push-params,
        get-dispatch-params,
        get-schedule-params,
        check-base-image,
      ]
    outputs:
      sha: ${{steps.get-params.outputs.sha}}
      tag: ${{steps.get-params.outputs.tag}}
      is-semver: ${{steps.get-params.outputs.is-semver}}
      latest: ${{steps.get-params.outputs.latest}}
      need-building: ${{steps.get-params.outputs.need-building}}
    steps:
      - id: get-params
        shell: bash
        run: |
          function isSemver() {
            [[ $tag =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo 'true' || echo 'false'
          }

          # push tag
          #
          # if tag is in semver format, assume it is a release of the latest version
          # it is too time consuming to check if the tag is the latest semver
          # hence assume latest should be updated
          # otherwise, assume it is a branch tag push, and only the tag is added
          # to the docker image and not updating the latest
          #
          # docker image tags:
          #   - "major.minor.patch-YYYY-MM-DD" (semver)
          #   - "latest" (semver)
          #   - "tag" (not semver)
          if [[ ${{github.event_name}}  == 'push' ]]; then

            tag="${{needs.get-push-params.outputs.tag}}"
            sha="${{needs.get-push-params.outputs.sha}}"
            is_semver=$(isSemver $tag)
            latest=${is_semver}
            need_building='true'

          # workflow dispatch
          #
          # if user did not request "latest", the image will not be tagged with "latest" tag
          # if user requested "latest", the image will be tagged only if the tag is in semver format
          #
          # docker image tags:
          #   - "major.minor.patch-YYYY-MM-DD" (semver)
          #   - "latest" (semver && latest requested)
          #   - "tag" (not semver)
          elif [[ ${{github.event_name}} == 'workflow_dispatch' ]]; then

            tag="${{needs.get-dispatch-params.outputs.tag}}"
            sha="${{needs.get-dispatch-params.outputs.sha}}"
            is_semver=$(isSemver $tag)
            latest=$([[ ${{inputs.latest}} == 'true' && ($is_semver == 'true') ]] && echo 'true' || echo 'false')
            need_building="true"

          # schedule
          #
          # its purpose is to update the base image periodically and it is intended for the "latest" release
          # therefore, if the latest tag in the mainline is a semver, build and update the latest tag
          # otherwise, it should skip the latest tag
          #
          # docker image tags:
          #   - "major.minor.patch-YYYY-MM-DD" (semver)
          #   - "latest" (semver)
          else
            tag="${{needs.get-schedule-params.outputs.tag}}"
            sha="${{needs.get-schedule-params.outputs.sha}}"
            is_semver=$(isSemver $tag)
            latest=$([[ $is_semver == 'true' ]] && echo 'true' || echo 'false')
            need_building=$([[ ${{needs.check-base-image.outputs.need-update}} == 'true' && $is_semver == 'true' ]] && echo 'true' || echo 'false')
          fi

          m_title="Build: ${{github.repository}}@${tag}"
          if [[${{github.event_name}} == 'schedule' && $is_semver == 'false']]; then
            m_title="${m_title} - WARNING!"
          fi

          m_body=$(cat <<EOF
          event-type:    ${{github.event_name}}
          need-building: ${need_building}
          tag:           ${tag}
          sha:           ${sha}
          is-semver:     ${is_semver}
          need-latest:   ${latest}
          EOF
          )

          echo "sha=${sha}" >> "$GITHUB_OUTPUT"
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"
          echo "is-semver=${is_semver}" >> "$GITHUB_OUTPUT"
          echo "latest=${latest}" >> "$GITHUB_OUTPUT"
          echo "need-building=${need_building}" >> "$GITHUB_OUTPUT"
          echo "shoutrrr-title=$m_title" >> "$GITHUB_OUTPUT"

          # output does not accept multi-line string, use env instead
          echo "shoutrrr_body<<EOF" >> "$GITHUB_ENV"
          echo "$m_body" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

      - uses: containrrr/shoutrrr-action@v1
        with:
          url: ${{ secrets.SHOUTRRR_URL }}
          title: ${{steps.get-params.outputs.shoutrrr-title}}
          message: ${{env.shoutrrr_body}}

  # build the image with tags based on tag is in semver format or not
  build:
    needs: [get-params]
    if: ${{needs.get-params.outputs.need-building == 'true'}}
    uses: ./.github/workflows/build.yml
    secrets:
      username: ${{ secrets.DOCKER_USERNAME }}
      password: ${{ secrets.DOCKER_PASSWORD }}
    with:
      ref: ${{needs.get-params.outputs.sha}}
      org: frederickwong
      image: sandbox
      platforms: linux/amd64,linux/arm64
      base-tag: ${{needs.get-params.outputs.tag}}
      need-latest: ${{needs.get-params.outputs.latest == 'true'}}
      need-build-date: ${{needs.get-params.outputs.is-semver == 'true'}}
      build-date-tz: America/Los_Angeles
